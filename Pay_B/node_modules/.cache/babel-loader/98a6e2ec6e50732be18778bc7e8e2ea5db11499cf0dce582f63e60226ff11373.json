{"ast":null,"code":"import { ModuleList, ModuleGet, ModuleNodes, ModuleSave, ModuleDelete } from '@/api/userMG';\nexport default {\n  data() {\n    return {\n      showdelete: false,\n      treeData: [],\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      },\n      form: {\n        addUser: '',\n        editUser: '',\n        addTime: '',\n        editTime: '',\n        moduleId: '',\n        parentId: '',\n        moduleLevel: '',\n        systemNo: '',\n        isLeaf: '',\n        fullIndex: '',\n        moduleIcon: '',\n        moduleOrder: '',\n        moduleName: '',\n        moduleNotes: '',\n        moduleUrl: ''\n      },\n      // rules表单验证\n      rules: {\n        parentId: [{\n          required: true,\n          message: '请选择父级菜单',\n          trigger: 'blur'\n        }],\n        moduleName: [{\n          required: true,\n          message: '请输入菜单名称',\n          trigger: 'blur'\n        }],\n        moduleIcon: [{\n          required: true,\n          message: '请输入菜单图标',\n          trigger: 'blur'\n        }],\n        moduleUrl: [{\n          required: true,\n          message: '请输入URL',\n          trigger: 'blur'\n        }],\n        moduleOrder: [{\n          required: true,\n          message: '请输入菜单顺序',\n          trigger: 'blur'\n        }]\n      },\n      fmenu: []\n    };\n  },\n  /**\r\n   * 创建完毕\r\n   */\n\n  created() {\n    this.getdata();\n    this.getmenu();\n  },\n  /**\r\n   * 里面的方法只有被调用才会执行\r\n   */\n  methods: {\n    // 获取数据\n    getdata() {\n      ModuleList().then(res => {\n        this.treeData = [{\n          id: 1,\n          pId: 0,\n          name: '平台顶级',\n          open: true,\n          checked: false\n        }, {\n          id: 2,\n          pId: 1,\n          name: '一层',\n          open: true,\n          checked: false\n        }, {\n          id: 3,\n          pId: 1,\n          name: '一层',\n          open: true,\n          checked: false\n        }, {\n          id: 12,\n          pId: 1,\n          name: '一层',\n          open: true,\n          checked: false\n        }, {\n          id: 13,\n          pId: 1,\n          name: '一层',\n          open: true,\n          checked: false\n        }, {\n          id: 17,\n          pId: 1,\n          name: '一层',\n          open: true,\n          checked: false\n        }, {\n          id: 4,\n          pId: 2,\n          name: '一层',\n          open: true,\n          checked: false\n        }, {\n          id: 5,\n          pId: 2,\n          name: '一层',\n          open: true,\n          checked: false\n        }, {\n          id: 6,\n          pId: 2,\n          name: '一层',\n          open: true,\n          checked: false\n        }, {\n          id: 7,\n          pId: 2,\n          name: '一层',\n          open: true,\n          checked: false\n        }];\n      }).catch(err => {\n        this.loading = false;\n        this.$message.error('菜单管理列表失败，请稍后再试！');\n      });\n    },\n    // 添加\n    addModule() {\n      this.showdelete = false;\n      this.form.addUser = '';\n      this.form.editUser = '';\n      this.form.addTime = '';\n      this.form.editTime = '';\n      this.form.moduleId = '';\n      this.form.parentId = '';\n      this.form.moduleLevel = '';\n      this.form.systemNo = '';\n      this.form.isLeaf = '';\n      this.form.fullIndex = '';\n      this.form.moduleIcon = '';\n      this.form.moduleOrder = '';\n      this.form.moduleName = '';\n      this.form.moduleNotes = '';\n      this.form.moduleUrl = '';\n    },\n    // 获取父级菜单\n    getmenu() {\n      let parm = {\n        page: '1',\n        limit: '10'\n      };\n      ModuleNodes(parm).then(res => {\n        this.fmenu = res.data;\n      }).catch(err => {\n        this.loading = false;\n        this.$message.error('父级菜单列表获取失败，请稍后再试！');\n      });\n    },\n    // 复选变单选\n    handleClick(data, checked, node) {\n      if (checked) {\n        this.$refs.tree.setCheckedNodes([]);\n        this.$refs.tree.setCheckedNodes([data]);\n        this.showdelete = true;\n      } else {}\n    },\n    // 点击节点\n    nodeclick(arr, node, self) {\n      ModuleGet(arr.id).then(res => {\n        console.log(JSON.stringify(res));\n        this.form = res.data.data;\n        this.$refs.tree.setCheckedNodes([]);\n        this.$refs.tree.setCheckedNodes([arr]);\n      }).catch(err => {\n        this.loading = false;\n        this.$message.error('用户管理获取失败，请稍后再试！');\n      });\n    },\n    // 保存菜单\n    saveModule(editData) {\n      this.$refs[editData].validate(valid => {\n        if (valid) {\n          ModuleSave(this.form).then(res => {\n            this.getdata();\n            this.getmenu();\n          }).catch(err => {\n            this.$message.error('菜单管理列表保存失败，请稍后再试！');\n          });\n        } else {\n          return false;\n        }\n      });\n    },\n    // 删除菜单\n    deleteModule() {\n      ModuleDelete(this.form.moduleId).then(res => {\n        this.getdata();\n        this.getmenu();\n        this.$message.error('菜单管理列表删除成功！');\n      }).catch(err => {\n        this.$message.error('菜单管理列表删除失败，请稍后再试！');\n      });\n    }\n  }\n};","map":{"version":3,"names":["ModuleList","ModuleGet","ModuleNodes","ModuleSave","ModuleDelete","data","showdelete","treeData","defaultProps","children","label","form","addUser","editUser","addTime","editTime","moduleId","parentId","moduleLevel","systemNo","isLeaf","fullIndex","moduleIcon","moduleOrder","moduleName","moduleNotes","moduleUrl","rules","required","message","trigger","fmenu","created","getdata","getmenu","methods","then","res","id","pId","name","open","checked","catch","err","loading","$message","error","addModule","parm","page","limit","handleClick","node","$refs","tree","setCheckedNodes","nodeclick","arr","self","console","log","JSON","stringify","saveModule","editData","validate","valid","deleteModule"],"sources":["src/views/hotelviews/system/Module.vue"],"sourcesContent":["/**\r\n * 系统管理 菜单管理\r\n */\r\n<template>\r\n  <div>\r\n    <!-- 面包屑导航 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>菜单管理</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 主体内容 -->\r\n    <el-row>\r\n      <!-- title -->\r\n      <div class=\"modt-box\">用户管理</div>\r\n      <el-col :span=\"4\"> </el-col>\r\n      <el-col :span=\"6\">\r\n        <div class=\"mod-btnbox\">\r\n          <el-button size=\"small\" type=\"primary\">全部展开</el-button>\r\n          <el-button size=\"small\" type=\"primary\">全部压缩</el-button>\r\n        </div>\r\n        <el-tree class=\"treeclass\" ref=\"tree\" :data=\"treeData\" default-expand-all=\"\" :props=\"defaultProps\" @node-click=\"nodeclick\" @check-change=\"handleClick\" check-strictly node-key=\"id\" show-checkbox></el-tree>\r\n      </el-col>\r\n      <el-col :span=\"18\">\r\n        <div class=\"mod-btnbox\">\r\n          <el-button size=\"small\" type=\"primary\" icon=\"el-icon-plus\" @click=\"addModule\">添加</el-button>\r\n        </div>\r\n        <el-form ref=\"form\" :model=\"form\" label-width=\"80px\" :rules=\"rules\">\r\n          <el-form-item label=\"父级菜单\" prop=\"parentId\">\r\n            <el-select size=\"small\" v-model=\"form.parentId\" placeholder=\"请选择\" class=\"selectw\">\r\n              <el-option v-for=\"parm in fmenu\" :key=\"parm.id\" :label=\"parm.name\" :value=\"parm.id\"></el-option>\r\n            </el-select>\r\n          </el-form-item>\r\n          <el-form-item label=\"菜单名称\" prop=\"moduleName\">\r\n            <el-input size=\"small\" v-model=\"form.moduleName\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"图标\" prop=\"moduleIcon\">\r\n            <el-input size=\"small\" v-model=\"form.moduleIcon\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"URL\" prop=\"moduleUrl\">\r\n            <el-input size=\"small\" v-model=\"form.moduleUrl\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"顺序\" prop=\"moduleOrder\">\r\n            <el-input size=\"small\" v-model=\"form.moduleOrder\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item>\r\n            <el-button size=\"small\" type=\"primary\" @click=\"saveModule('form')\">保存</el-button>\r\n            <el-button size=\"small\" type=\"primary\" v-show=\"showdelete\" @click=\"deleteModule\">删除</el-button>\r\n          </el-form-item>\r\n        </el-form>\r\n      </el-col>\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  ModuleList,\r\n  ModuleGet,\r\n  ModuleNodes,\r\n  ModuleSave,\r\n  ModuleDelete\r\n} from '@/api/userMG'\r\nexport default {\r\n  data() {\r\n    return {\r\n      showdelete: false,\r\n      treeData: [],\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'name'\r\n      },\r\n      form: {\r\n        addUser: '',\r\n        editUser: '',\r\n        addTime: '',\r\n        editTime: '',\r\n        moduleId: '',\r\n        parentId: '',\r\n        moduleLevel: '',\r\n        systemNo: '',\r\n        isLeaf: '',\r\n        fullIndex: '',\r\n        moduleIcon: '',\r\n        moduleOrder: '',\r\n        moduleName: '',\r\n        moduleNotes: '',\r\n        moduleUrl: ''\r\n      },\r\n      // rules表单验证\r\n      rules: {\r\n        parentId: [\r\n          { required: true, message: '请选择父级菜单', trigger: 'blur' }\r\n        ],\r\n        moduleName: [\r\n          { required: true, message: '请输入菜单名称', trigger: 'blur' }\r\n        ],\r\n        moduleIcon: [\r\n          { required: true, message: '请输入菜单图标', trigger: 'blur' }\r\n        ],\r\n        moduleUrl: [{ required: true, message: '请输入URL', trigger: 'blur' }],\r\n        moduleOrder: [\r\n          { required: true, message: '请输入菜单顺序', trigger: 'blur' }\r\n        ]\r\n      },\r\n      fmenu: []\r\n    }\r\n  },\r\n  /**\r\n   * 创建完毕\r\n   */\r\n\r\n  created() {\r\n    this.getdata()\r\n    this.getmenu()\r\n  },\r\n\r\n  /**\r\n   * 里面的方法只有被调用才会执行\r\n   */\r\n  methods: {\r\n    // 获取数据\r\n    getdata() {\r\n      ModuleList()\r\n        .then(res => {\r\n          this.treeData = [\r\n            {\r\n              id: 1,\r\n              pId: 0,\r\n              name: '平台顶级',\r\n              open: true,\r\n              checked: false\r\n            },\r\n            {\r\n              id: 2,\r\n              pId: 1,\r\n              name: '一层',\r\n              open: true,\r\n              checked: false\r\n            },\r\n            {\r\n              id: 3,\r\n              pId: 1,\r\n              name: '一层',\r\n              open: true,\r\n              checked: false\r\n            },\r\n            {\r\n              id: 12,\r\n              pId: 1,\r\n              name: '一层',\r\n              open: true,\r\n              checked: false\r\n            },\r\n            {\r\n              id: 13,\r\n              pId: 1,\r\n              name: '一层',\r\n              open: true,\r\n              checked: false\r\n            },\r\n            {\r\n              id: 17,\r\n              pId: 1,\r\n              name: '一层',\r\n              open: true,\r\n              checked: false\r\n            },\r\n            {\r\n              id: 4,\r\n              pId: 2,\r\n              name: '一层',\r\n              open: true,\r\n              checked: false\r\n            },\r\n            {\r\n              id: 5,\r\n              pId: 2,\r\n              name: '一层',\r\n              open: true,\r\n              checked: false\r\n            },\r\n            {\r\n              id: 6,\r\n              pId: 2,\r\n              name: '一层',\r\n              open: true,\r\n              checked: false\r\n            },\r\n            {\r\n              id: 7,\r\n              pId: 2,\r\n              name: '一层',\r\n              open: true,\r\n              checked: false\r\n            }\r\n          ]\r\n        })\r\n        .catch(err => {\r\n          this.loading = false\r\n          this.$message.error('菜单管理列表失败，请稍后再试！')\r\n        })\r\n    },\r\n    // 添加\r\n    addModule() {\r\n      this.showdelete = false\r\n      this.form.addUser = ''\r\n      this.form.editUser = ''\r\n      this.form.addTime = ''\r\n      this.form.editTime = ''\r\n      this.form.moduleId = ''\r\n      this.form.parentId = ''\r\n      this.form.moduleLevel = ''\r\n      this.form.systemNo = ''\r\n      this.form.isLeaf = ''\r\n      this.form.fullIndex = ''\r\n      this.form.moduleIcon = ''\r\n      this.form.moduleOrder = ''\r\n      this.form.moduleName = ''\r\n      this.form.moduleNotes = ''\r\n      this.form.moduleUrl = ''\r\n    },\r\n    // 获取父级菜单\r\n    getmenu() {\r\n      let parm = {\r\n        page: '1',\r\n        limit: '10'\r\n      }\r\n      ModuleNodes(parm)\r\n        .then(res => {\r\n          this.fmenu = res.data\r\n        })\r\n        .catch(err => {\r\n          this.loading = false\r\n          this.$message.error('父级菜单列表获取失败，请稍后再试！')\r\n        })\r\n    },\r\n    // 复选变单选\r\n    handleClick(data, checked, node) {\r\n      if (checked) {\r\n        this.$refs.tree.setCheckedNodes([])\r\n        this.$refs.tree.setCheckedNodes([data])\r\n        this.showdelete = true\r\n      } else {\r\n      }\r\n    },\r\n    // 点击节点\r\n    nodeclick(arr, node, self) {\r\n      ModuleGet(arr.id)\r\n        .then(res => {\r\n          console.log(JSON.stringify(res))\r\n          this.form = res.data.data\r\n          this.$refs.tree.setCheckedNodes([])\r\n          this.$refs.tree.setCheckedNodes([arr])\r\n        })\r\n        .catch(err => {\r\n          this.loading = false\r\n          this.$message.error('用户管理获取失败，请稍后再试！')\r\n        })\r\n    },\r\n    // 保存菜单\r\n    saveModule(editData) {\r\n      this.$refs[editData].validate(valid => {\r\n        if (valid) {\r\n          ModuleSave(this.form)\r\n            .then(res => {\r\n              this.getdata()\r\n              this.getmenu()\r\n            })\r\n            .catch(err => {\r\n              this.$message.error('菜单管理列表保存失败，请稍后再试！')\r\n            })\r\n        } else {\r\n          return false\r\n        }\r\n      })\r\n    },\r\n    // 删除菜单\r\n    deleteModule() {\r\n      ModuleDelete(this.form.moduleId)\r\n        .then(res => {\r\n          this.getdata()\r\n          this.getmenu()\r\n          this.$message.error('菜单管理列表删除成功！')\r\n        })\r\n        .catch(err => {\r\n          this.$message.error('菜单管理列表删除失败，请稍后再试！')\r\n        })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.user-search {\r\n  margin-top: 20px !important;\r\n}\r\n.user-search td {\r\n  margin-top: 20px !important;\r\n}\r\n.userRole {\r\n  width: 100%;\r\n}\r\n.el-table__expanded-cell {\r\n  padding: 0px !important;\r\n  margin: 0px !important;\r\n}\r\n.modt-box {\r\n  width: 100%;\r\n  height: 60px;\r\n  line-height: 60px;\r\n  background-color: #f0f2f5;\r\n  text-align: center;\r\n  color: #334157;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  font-size: 24px;\r\n}\r\n.mod-btnbox {\r\n  margin-bottom: 20px;\r\n}\r\n.treeclass {\r\n  border: 1px solid #f3f3f3;\r\n  padding-top: 20px;\r\n  padding-bottom: 20px;\r\n}\r\n.selectw {\r\n  width: 100%;\r\n}\r\n</style>\r\n \r\n "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}